#############################################################
## NAMD TEMPLATE FOR NON-PERIODIC SIMULATIONS			   ##
## (may have Spherical Boundary Condition)			       ##
#############################################################

## USAGE
# Search for TODO
# Change "if {0}" to "if {1}" and vice-versa to enable/disable a section.

## ------------------------------------------------------------------------------
# Minimization and Equilibration of Ubiquitin in a Water Sphere (NON-PERIODIC SPEHRICAL Boundary Condition)
## ------------------------------------------------------------------------------

# TODO: 0 -> first run, increment for successive restarts. 
# for restarts, output file names are appended by the run_index 
# ex. for 1st restart (run_index 1) -> output1.dcd, output1.coor
set run_index		0;

# TODO (IF RESTARTING): last step of previous run (from log file)
firsttimestep		0;

#############################################################
## ADJUSTABLE PARAMETERS                                   ##
#############################################################

structure          ../common/ubq_ws.psf;		# TODO: input structure info (.psf) file
coordinates        ../common/ubq_ws.pdb;		# TODO: input initial coordinates (.pdb) file

# defining variables used at multiple places
set temperature          310;					# TODO: a variable to store Temperature (in K)
set outputnameprefix     ubq_ws_eq;				# TODO: prefix for output file names		

# output name for this run
if {$run_index > 0} {
	set outputname           $outputnameprefix$run_index; # for restarts, append run_index on the file name
} else {
	set outputname           $outputnameprefix;	
}

# continuing a run
if {$run_index > 0} {
	# restart file name prefix from last run
	if {$run_index == 1} {
		# First restart -> just prefix
		set restartfilename		$outputnameprefix.restart;	   
	} else { 
		# 2nd, 3rd etc restarts
		set restartfilename		$outputnameprefix[expr $run_index - 1].restart;
	}
	
	binCoordinates        $restartfilename.coor;	# binary coordinates from last run restart.coor file
	binVelocities         $restartfilename.vel;	# binary velocities from last run restart.vel file
	extendedSystem        $restartfilename.xsc;	# cell dimensions from last run restart.xsc file (only for variable V simulations)
	
	#numsteps        100000;		# (redundant) run stops when this step is reached
} 


#############################################################
## SIMULATION PARAMETERS                                   ##
#############################################################

# Input
paraTypeCharmm	    on;
parameters          ../common/par_all27_prot_lipid.inp;
#parameters		par_all36_na.prm;
#parameters		par_all36_prot.prm;
#parameters		par_all36_carb.prm;
#parameters		par_all36_cgenff.prm;
#parameters		par_all36_lipid_ljpme.prm;
#parameters		par_all36m_prot.prm;

# Topology and Parameter (toppar) Stream (.str) files: provides additional force filed parameters
#parameters		../common/toppar_water_ions_namd.str;	# for water and ions	


# NOTE: Do NOT set the initial temperature if you have also specified a .vel restart file. 
# The Temperature will be calculated from restart.vel file
if {$run_index == 0} {
	temperature         $temperature;	# the initial temperature (in K)
}


## Force-Field Parameters
exclude             scaled1-4;		# Which DIRECTLY-BONDED atom pairs are excluded from non-bonding interactions. "scaled1-4" means neglect non-bonding interactions of 1-2 and 1-3, and scale for 1-4 acc to "1-4scaling" option
1-4scaling          1.0;	# how much the Electrostatic interation b/w 1-4 atoms (3 bonds apart) is "turned ON" ....in range [0, 1]

cutoff              12.0;	# distance (in Å) after which Electrostatic and VanderWall Interactions are cut-off. 
							# However, for fast elec solvers PME and MSM, cutoff acts as a splitting distance b/w short and long range interactions
switching           on;		# use switching functions to smoothly bring VdW and Electrostatic interactions to 0 at cutoff distance (and not abruptly set it to 0)
switchdist          10.0;	# distance (in Å) to start the smooth decay of VdW and Elec interaction energy. (should be < cutoff)

pairlistdist        14.0;	# distance (in Å) up-till which to list atoms (for each atom) for possible VdW and Elec interactions (should be > cutoff)


## Integrator Parameters
timestep            1.0;	# delta t, in femtoseconds (fs). [non-negative float]
rigidBonds          all;	# whether linear bonds involving H are maintained rigid (fixed bond-length). Values: none | water | all
							# (needed for steps >= 2fs) (water should ALWAYS be rigid since it is paramaterized that way)

nonbondedFreq       1;		# how often (in no of timesteps) should NON-BONDED interactions be calculated
fullElectFrequency  1;		# how often (in no of timesteps) should ELECTROSTATIC interactions be calculated
stepspercycle       4;		# no of timesteps in one CYCLE. Atoms are reassigned pair-lists after each cycle within pairlistdist for possible VdW and Elec interactions
							# NOTE: For accuracy, timestep * stepspercycle <= 4

#### Generalized Bron Implicit Solvent: implicit model for Water AND Ions
# Note: With GBIS
#		1. Structure and Coordinates should NOT contain any water or ion molecules
#		2. No periodic boundary condition
#		3. No Constant P control
#		4. No PME or MSM (i.e no long range electrostatics)
#		5. Cut off should be higher than that with PME to account long-rong electrostatics
if {0} {
	gbis                on;
	# cutoff			14.0;
	alphaCutoff         12.0;	# (A) Used to calculate Born radius of atoms. Usually a few A smaller than cutoff distance 
	ionConcentration    0.3;	# Concentration of implict ions in moles/L (M). High conc -> high electrostatic screening (low elec interactions b/w actual atoms)

	solventDielectric	78.5;	# Dielectric constant of solvent, usually water 78.5 or 80
	
	if {0} {
		sasa				on;		# calculate Solvent Accessible Surface Area (SASA), and use it to compute non-polar (hydrophobic) energy contribution of system-implict solvent interaction
									# Non-polar (Hydrophobic) interaction Energy = sasa * surface_tension. This is added to ELECTROSTATIC Energy
		surfaceTension		0.005;	# (kcal/mol/A^2) Surface Tension for calculating Hydrophobic Energy
	}
}


# Periodic Boundary Conditions (TODO: calaulate for your system)
# NOTE 1: cell origin is the geometric center of unit cell from absolute origin
# cell basis vectors are from bottom-left vertex of the unit cell
# all dimensions are in Å
if {0} {
	# NOTE 2: DON'T specify when restart.xsc file is also specified as "extendedSystem" ex. when restarting sim
	# These are then read from restart.xsc file
	if {$run_index == 0} {
		cellBasisVector1    42.0    0.   0.0
		cellBasisVector2     0.0  44.0   0.0
		cellBasisVector3     0.0    0   47.0
		cellOrigin          31.0   29.0  17.5
	}

	# wrapWater			on;		# Whether to wrap water atoms
	wrapAll             on;		# Whether to wrap ALL atoms
}


## Constant Temperature Control
# Principle: Total K.E of system = sum(1/2 mv^2) = 3/2N KbT (N: no of atoms)
# NOTE: Atomic velocities are rescaled at each frame to maintain constant T (or K.E)
#       Disable to minimize disturbances in atomic motion ex. when using Constant Vel SMD 
if {1} {
	langevin            on;		# do langevin dynamics for maintaining constant T
	langevinDamping     1;		# langevin friction coefficient (gamma) (in 1/picoseconds). Friction removes energy from the system
	langevinTemp        $temperature;	# temperature to maintain during equilibration (in K)
	langevinHydrogen    off;	# whether to use Langevin dynamics on Hydrogen
}

# 2. Temperature Rescale: Rescales atomic velocities to match target Temp
if {0} {
	rescaleFreq         2		# how often (in no of time steps) should the atomic vels be rescaled to match target T
	rescaleTemp         $temperature		# Target Temperature
}

# Constant Pressure Control (variable volume) - only for PERIODIC systems
if {0} {
	useGroupPressure      yes;	# whether to use the pressure of a group of H atoms rather than individual H's. needed for rigidBonds
	useFlexibleCell       no;	# allows cell dimensions to vary independently of each other
	useConstantArea       no;	# whether to maintain constant x-y cross-sectional area, and just vary z-dimension

	langevinPiston        on
	langevinPistonTarget  1.01325;	# target pressure (in bar) that the langevin piston tries to maintain during simulation
	langevinPistonPeriod  100.0;	# oscillation time period (in femtoseconds) of langevin piston
	langevinPistonDecay   50.0;	# damping time constant (in femtoseconds) of langevin piston
	langevinPistonTemp    $temperature;	# must be equal to langevinTemp if constant T control is in use
}

# Particle Mesh Ewald (PME) (for full-system periodic electrostatics)
# Incompatible with GBIS
if {0} {
	PME                 yes;	# Enable PME - Fast solver for long-range electrostatics in periodic systems
	PMEGridSpacing      1.0;	# spacing b/w PME grid points on cell basis vectors (in Å), used for automatic PME grid sizes

	# manual grid definition (must be divisible by 2, 3 or 5 for Fast Fourier Transform)
	#PMEGridSizeX        45;	# no of grid points on cellBasisVector1
	#PMEGridSizeY        45;	# no of grid points on cellBasisVector2
	#PMEGridSizeZ        48;	# no of grid points on cellBasisVector3
}

# Multistep Summation Method (MSM) - mostly used for non-periodic systems
# Incompatible with GBIS
if {1} {
	MSM                 on;		# Enable MSM - Fast solver for long-range electrostatics, mostly used for non-periodic systems
	MSMGridSpacing      2.5;	# spacing b/w MSM grid points (in Å). Very sensitive to performance, use this default
	
	### MSM Grid Size for Non-Periodic simulations
	# NOTE: All atoms must remain confined within this space. For this, restraining potentials such as sphericalBC are generally used
	# Calculate min and max coordinates of all atoms within entire system, and round to next higher integer
	MSMxmin            -5.0
	MSMymin            -5.0
	MSMzmin            -15.0 

	MSMxmax             60.0
	MSMymax             60.0
	MSMzmax             46
}

# Output
outputName          $outputname

restartfreq         500;	# how often (in no of time steps) the simulation state is saved for easy restart later. saves atomic coordinates and velocities in restart.coord and restart.vel file
dcdfreq             10;		# how often (in no of time steps) the atomic coordinates are saved in trajectory .dcd file
outputEnergies      10;		# how often (in no of time steps) the system Energy is saved in .log file
if {0} {
	outputPressure      10;		# ONLY FOR PERIODIC SIMS: how often (in no of time steps) the system Pressure is saved in .log file
}
if {0} {
	xstfreq             250;	# ONLY FOR VARIABLE VOLUME: how often (in no of time steps) the unit cell dimensions (or vertices) are saved in extended system trajectory .xst file
}

# Interactive MD Settings (can view and manipulate simultaion live in VMD)
if {0} {
	IMDon           on
	IMDport         3000    ;# port number (enter it in VMD)
	IMDfreq         1       ;# send every 1 frame
	IMDwait         no      ;# wait for VMD to connect before running?
}

#############################################################
## EXTRA PARAMETERS                                        ##
#############################################################
# Put here any custom parameters that are specific to this job (e.g SMD, TclForces, etc...)

if {0} {
	useAVXTiles             off;     # use the AVX-512 vector tiles optimisations
}

# Spherical boundary conditions
# NOTE: in case of SMD to unfold (or stretch) the protein, solvent sphere should be big enough 
# 		so that the entire unfolded state can lie within it. Otherwise sphericalBC would introduce 
#		drastic surface effects and force on SMD atoms will skyrocket (atoms will be forced to stay within the sphere) 
if {1} {
	sphericalBC         on
	
	sphericalBCcenter   30.3081743413, 28.8049907121, 15.353994423
	sphericalBCr1       26.0
	
	sphericalBCk1       10
	sphericalBCexp1     2
}

# Fixed Atoms Constraint (ex in SMD)
if {0} {
	fixedAtoms          on;		# allow some atoms to be spacially fixed
	fixedAtomsCol       B;		# which column is used to specify fixed aToms (one of X, Y, Z, B (beta), O (occupancy)) [defau;t: beta (B)]
	fixedAtomsFile      ubq_ws_eq.smd-pcv.pdb;	# TODO: pdb file containing Fixed atoms (atoms with beta B = 1)
}

## SMD: Steered Molecular Dynamics (only for constant velocity pulling)
# 1. A dummy atom is connected via virtual spring to the COM of SMD atom(s)
# 2. Constant vel pull is then applied to the dummy atom, 
# 3. Force Analysis: force experienced by COM of SMD atom(s) is studied 
#  					vs [time] or vs [SMD COM displacement] or vs [SMD COM-fixed atom distance]   
if {0} {
	SMD			on;		# enable SMD
	SMDFile			ubq_ws_eq.smd-pcv.pdb;		# TODO: pdb file containing SMD atoms (atoms with occupancy O = 1)
	SMDk			7;		# (kcal/mol/Å2) SMD virtual spring constant between COM of SMD atom(s) and dummy atom 
	SMDVel			0.001;	# (A/timestep) constant pull velocity applied to dummy atom
	
	# Unit vector representing the direction of applied pull. 
	# Mostly its just the unit vector connecting fixed and SMD atom = vecnorm [vecsub $smdatompos $fixedatompos]
	SMDDir			0.27547023565970413 0.5308710720721614 0.8014312535099571;
	
	SMDOutputFreq	10;		# timesteps between consecutive smd output to .log file
}

# Constant Force Pulling SMD (note that this does not require "SMD on")
# 1. No dummy atom or virtual spring
# 2. Constant force is directly applied to SMD atom(s) indivially i.e SMD atoms can have different forces
# 3. Distance Analysis: distance b/w COM of SMD atom(s) and fixed atom (end-to-end distnace) vs time
#					 OR SMD atom displacement vs time
if {0} {
	constantforce yes;		# Enable constant force pull on below specified atoms
			
	# pdb containing atoms to which constant force will be applied
	# constant force is ONLY applied to atoms with occupancy O != 0 in the below file
	# 1. occupancy (O) of each atom is treated as the magnitude of Force to be applied 
	#	(in kcal/mol/Å = 69.5 pico N (pN))
	# 2. the x,y,z values of each atom are used to specify direction of force to be applied (and NOT coordinates)
	# 3. Force vector for each atom = (x, y, z) * O  (mag in kcal/mol/Å)
	consforcefile ubq_ws_eq.smd-pcf.pdb;	
}

# ------- Harmonic Constraints ---------
# Used to constraint some atoms about their reference positions. Like a harmonic SPRING, they can osciallte about their reference pos
# -> constraint Energy E_i = k_i (r_i - r_i_ref)^e, where k_i: force constant (kcal/mol/A^2), r_i_ref: equilibium position (A) of i'th atom
# -> Constraint Force F_i = e * k_i (r_i - r_i_ref) ^ (e-1)    on i'th atom
# -> Effective force constant = e * k_i
if {0} {
	constraints			on;			# on | off harmonic constraints
	consexp				2;			# exponent used in harmonic constraints (e). [Default 2] like in Hooks Law. V(x) = 1/2 k x^2
	
	conskfile			ubq_ws_eq.constraints.pdb;		# PDB File with force constants (kcal/mol/A^2) for each atom in a column. Atoms with NON_ZERO value of k are constrained 
	conskcol			O;								# Column specifying force constants in above file. Can be X, Y, Z, B (beta), O (occupancy)
	
	consref				ubq_ws_eq.constraints.pdb;		# PDB File with reference (equilibrium) position of constrained atoms
	
	constraintScaling	1.0;		# Harmonic constraint energy func is muliplied by this factor at every timestpe. Allows to gradually turn off constraints
	
	## Selected Constraints: Restrain only selected Cartesian components of the coordinates 
	# Useful for allowing motion along a place or axis
	# EX. 1. Restraint X only: Allow motion only in YZ Plane
	#     2. Restraint Y and z: Allow motion only in X axis
	if {0} {
		selectConstraints		on;			# on | off selected constraints	
		
		selectConstrX			off;		# Restrain about X components of coordinates
		selectConstrY			on;			# Restrain about Y components of coordinates
		selectConstrZ			on;			# Restrain about Z components of coordinates
	}
}


#############################################################
## EXECUTION SCRIPT                                        ##
#############################################################

# Minimization (atomic velocities are set to 0 before minimization)
# TODO: Disable if already minimized, like doing SMD on already equilibraited system
if {$run_index == 0} {
	if {1} {
		minimize            2000;		# TODO: time steps to run minimization of energy
		reinitvels          $temperature;	# after minimization, re-initialize atomic velocities according to this temperature
											# (vels are chosen randomly from a corresponding Maxwell's Distribution. Hence, they will be different for each minimization)
	}
}

# Equilibriation
run 50000;		# TODO: time steps to equilibriate the system
